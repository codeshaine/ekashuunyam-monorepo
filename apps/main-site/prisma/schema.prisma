generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  college       String?
  contact       String?
  accounts      Account[]
  form          Form[]
  Score         Score[]
  sessions      Session[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Form {
  id        String   @id @default(cuid())
  userId    String
  fullTeam  Boolean  @default(false)
  teamNmae  String?
  cretedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
  verfied   Boolean  @default(false)
  events    Event[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Score     Score[]
}

model Event {
  id           String   @id @default(cuid())
  name         String
  formId       String
  participants Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  form         Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  Score        Score[]

  @@unique([formId, name])
}

model Score {
  id         String @id
  eventId    String
  formId     String
  assignedBy String
  round      Int
  score      Int
  User       User   @relation(fields: [assignedBy], references: [id], onDelete: Cascade)
  Event      Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  Form       Form   @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@unique([eventId, formId, round])
}
